<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".codegen.cs" #>
// <auto-generated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </auto-generated>

using System;
using UnityEngine;
using UnityEngine.Events;

namespace Unity3D.Whiskey
{
<# for (var i = 0; i < 4; i++) { #>
    /// <summary>
    /// Listener for events. Binds an <see cref="Event{<#= GenerateTemplateArgs(i) #>}"/> to a <see cref="UnityEvent{<#= GenerateTemplateArgs(i) #>}"/>. Automatically Enabled/Disabled depending on <see cref="GameObject"/> state.
    /// </summary>
    public interface IListener<<#= GenerateTemplateArgs(i) #>>
    {
        /// <summary>
        /// The bound Event
        /// </summary>
        Event<<#= GenerateTemplateArgs(i) #>> Event { get; set; }

        /// <summary>
        /// The bound Reaction
        /// </summary>
        UnityEvent<<#= GenerateTemplateArgs(i) #>> Reaction { get; set; }

        /// <summary>
        /// Do not use.
        /// </summary>
        /// <remarks>
        /// This method is used internally to Trigger reactions from an <see cref="Event{<#= GenerateTemplateArgs(i) #>}"/>. It should not be called by a Whiskey user.
        /// </remarks>
        [Obsolete]
        void Handle(<#= GenerateParamArgs(i) #>);
    }

    /// <summary>
    /// Listener for events. Binds an <see cref="Event{<#= GenerateTemplateArgs(i) #>}"/> to a <see cref="UnityEvent{<#= GenerateTemplateArgs(i) #>}"/>. Automatically Enabled/Disabled depending on <see cref="GameObject"/> state.
    /// </summary>
    /// <remarks>
    /// Attach this to any <see cref="GameObject"/> in the Unity Editor and connect one <see cref="Event{<#= GenerateTemplateArgs(i) #>}"/> to multiple Unity reactions.
    /// </remarks>
    public class Listener<<#= GenerateTemplateArgs(i) #>> : MonoBehaviour, IListener<<#= GenerateTemplateArgs(i) #>>
    {
        [SerializeField]
        private Event<<#= GenerateTemplateArgs(i) #>> @event;

        /// <inheritdoc/>
        public Event<<#= GenerateTemplateArgs(i) #>> Event { get => @event; set => @event = value; }

        [SerializeField]
        private UnityEvent<<#= GenerateTemplateArgs(i) #>> reaction;

        /// <inheritdoc/>
        public UnityEvent<<#= GenerateTemplateArgs(i) #>> Reaction { get => reaction; set => reaction = value; }

        /// <inheritdoc/>
        public void Handle(<#= GenerateParamArgs(i) #>) => Reaction.Invoke(<#= GenerateParamArgNames(i) #>);

        private void OnEnable() => Event.Subscribe(this);

        private void OnDisable() => Event.Unsubscribe(this);
    }

<# } #>
}

<#+
string GenerateTemplateArgs(int j)
    {
        var res = new List<string>();
        for (var i = 0; i <= j; i++)
        {
            res.Add("TArg" + i);
        }

        return string.Join(", ", res);
    }

    string GenerateParamArgs(int j)
    {
        var res = new List<string>();
        for (var i = 0; i <= j; i++)
        {
            res.Add("TArg" + i + " arg"+ i);
        }

        return string.Join(", ", res);
    }

    string GenerateParamArgNames(int j)
    {
        var res = new List<string>();
        for (var i = 0; i <= j; i++)
        {
            res.Add(" arg"+ i);
        }

        return string.Join(", ", res);
    }
#>
