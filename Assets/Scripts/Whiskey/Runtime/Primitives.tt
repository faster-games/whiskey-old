<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".codegen.cs" #>
<#
    var filePath = Path.GetDirectoryName(this.Host.TemplateFile) + "\\Generated";
    foreach (var primitive in Primitives)
    {
        string fileName = CamelCase(primitive) + "Listener";
#>
// <auto-generated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </auto-generated>

using UnityEngine;

namespace Unity3D.Whiskey
{
    /// <summary>
    /// Serializable Listener&lt;<#= primitive #>&gt;. Binds <see cref="Event{<#= primitive #>}"/> to multiple Unity reactions.
    /// </summary>
    /// <remarks>
    /// Attach this to any <see cref="GameObject"/> in the Unity Editor and connect one <see cref="Event{<#= primitive #>}"/> to multiple Unity reactions.
    /// </remarks>
    public class <#= CamelCase(primitive) #>Listener : Listener<<#= primitive #>>
    {
    }
}
<#
        SaveFile(filePath, fileName, this.GenerationEnvironment.ToString());
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
        fileName = CamelCase(primitive) + "Event";
#>
// <auto-generated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </auto-generated>

using UnityEngine;

namespace Unity3D.Whiskey
{
    /// <summary>
    /// Serializable Event&lt;<#= primitive #>&gt;. Can be <see cref="Event{<#= primitive #>}.Raise(<#= primitive #>)"/>-ed with a <#= primitive #>.
    /// </summary>
    /// <remarks>
    /// Create a new <#= CamelCase(primitive) #> in the Unity Editor project pane with "Right Click => Whiskey => Events => <#= CamelCase(primitive) #>".
    /// </remarks>
    [CreateAssetMenu(menuName = "Whiskey/Events/<#= CamelCase(primitive) #>")]
    public class <#= CamelCase(primitive) #>Event : Event<<#= primitive #>>
    {
    }
}
<#
        SaveFile(filePath, fileName, this.GenerationEnvironment.ToString());
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
        fileName = CamelCase(primitive) + "EventEditor";
#>
// <auto-generated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </auto-generated>

using UnityEngine;

namespace Unity3D.Whiskey.Editor
{
#if UNITY_EDITOR
    [UnityEditor.CanEditMultipleObjects]
    [UnityEditor.CustomEditor(typeof(<#= CamelCase(primitive) #>Event))]
    public class <#= CamelCase(primitive) #>EventEditor : UnityEditor.Editor
    {
        private <#= MapToPropType(primitive) #> v;

        public override void OnInspectorGUI()
        {
            base.OnInspectorGUI();

            UnityEngine.GUI.enabled = UnityEngine.Application.isPlaying;

            v = UnityEditor.EditorGUILayout.<#= MapToControl(primitive) #>(v);

            if (UnityEngine.GUILayout.Button("Raise"))
            {
                foreach (var tgt in targets)
                {
                    (tgt as <#= CamelCase(primitive) #>Event).Raise(v);
                }
            }
        }
    }
#endif
}
<#
        SaveFile(filePath, fileName, this.GenerationEnvironment.ToString());
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
        }
#>
<#+
string CamelCase(string className)
{
    if (char.IsLower(className[0]))
    {
        return char.ToUpper(className[0]) + className.Substring(1);
    }
    else
    {
        return className;
    }
}

string MapToPropType(string prim)
{
    switch (prim)
    {
        case "Transform":
        case "Vector3":
        case "Vector2":
            return "UnityEditor.SerializedProperty";
        default:
            return prim;
    }
}

string MapToControl(string prim)
{
    switch (prim)
    {
        case "string":
            return "TextField";
        case "int":
            return "IntField";
        case "float":
            return "FloatField";
        case "bool":
            return "Toggle";
        case "GameObject":
            return "ObjectField";
        case "Transform":
        case "Vector3":
        case "Vector2":
            return "PropertyField";
        default:
            throw new System.Exception("add another case");
    }
}

string MapToArgs(string prim)
{
    switch (prim)
    {
        case "Vector3":
            return "\"Vector3\", v";
        case "Vector2":
            return "\"Vector2\", v";
        default:
            return "v";
    }
}

void SaveFile(string folder, string fileName, string content)
{
    if (!Directory.Exists(folder))
    {
        Directory.CreateDirectory(folder);
    }

	using (FileStream fs = new FileStream(Path.Combine(folder, fileName.Trim() + ".cs"), FileMode.Create))
    {
        using (StreamWriter str = new StreamWriter(fs))
        {
            str.WriteLine(content);
            str.Flush();
        }
    }
}

string[] Primitives = new string[] {
"string",
"int",
"float",
"bool",
"GameObject",
"Transform",
"Vector3",
"Vector2"
};
#>