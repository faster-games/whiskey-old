<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".codegen.cs" #>
// <auto-generated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </auto-generated>

using System.Collections.Generic;
using UnityEngine;

namespace Unity3D.Whiskey
{
<# for (var i = 0; i < 4; i++) { #>
    /// <summary>
    /// Event that can be subscribed to, and raised.
    /// </summary>
    public interface IEvent<<#= GenerateTemplateArgs(i) #>>
    {
        /// <summary>
        /// Subscribes a listener to the event.
        /// </summary>
        /// <param name="listener">Listener to subscribe</param>
        void Subscribe(Listener<<#= GenerateTemplateArgs(i) #>> listener);

        /// <summary>
        /// Unsubscribes a listener from the event.
        /// </summary>
        /// <param name="listener">Listener to unsubscribe</param>
        void Unsubscribe(Listener<<#= GenerateTemplateArgs(i) #>> listener);

        /// <summary>
        /// Raises the event.
        /// </summary>
        void Raise(<#= GenerateParamArgs(i) #>);
    }

    /// <summary>
    /// Event that can be subscribed to, and raised.
    /// </summary>
    public class Event<<#= GenerateTemplateArgs(i) #>> : ScriptableObject, IEvent<<#= GenerateTemplateArgs(i) #>>
    {
        private readonly List<Listener<<#= GenerateTemplateArgs(i) #>>> listeners = new List<Listener<<#= GenerateTemplateArgs(i) #>>>();

        /// <inheritdoc />
        public void Subscribe(Listener<<#= GenerateTemplateArgs(i) #>> listener) => listeners.Add(listener);

        /// <inheritdoc />
        public void Unsubscribe(Listener<<#= GenerateTemplateArgs(i) #>> listener) => listeners.Remove(listener);

        /// <inheritdoc />
        public void Raise(<#= GenerateParamArgs(i) #>) => listeners.ForEach(l => l.Handle(<#= GenerateParamArgNames(i) #>));
    }

<# } #>
}

<#+
string GenerateTemplateArgs(int j)
    {
        var res = new List<string>();
        for (var i = 0; i <= j; i++)
        {
            res.Add("TArg" + i);
        }

        return string.Join(", ", res);
    }

    string GenerateParamArgs(int j)
    {
        var res = new List<string>();
        for (var i = 0; i <= j; i++)
        {
            res.Add("TArg" + i + " arg"+ i);
        }

        return string.Join(", ", res);
    }

    string GenerateParamArgNames(int j)
    {
        var res = new List<string>();
        for (var i = 0; i <= j; i++)
        {
            res.Add(" arg"+ i);
        }

        return string.Join(", ", res);
    }
#>