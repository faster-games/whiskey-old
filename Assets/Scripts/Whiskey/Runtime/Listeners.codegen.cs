// <auto-generated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </auto-generated>

using System;
using UnityEngine;
using UnityEngine.Events;

namespace Unity3D.Whiskey
{
    /// <summary>
    /// Listener for events. Binds an <see cref="Event{TArg0}"/> to a <see cref="UnityEvent{TArg0}"/>. Automatically Enabled/Disabled depending on <see cref="GameObject"/> state.
    /// </summary>
    public interface IListener<TArg0>
    {
        /// <summary>
        /// The bound Event
        /// </summary>
        Event<TArg0> Event { get; set; }

        /// <summary>
        /// The bound Reaction
        /// </summary>
        UnityEvent<TArg0> Reaction { get; set; }

        /// <summary>
        /// Do not use.
        /// </summary>
        /// <remarks>
        /// This method is used internally to Trigger reactions from an <see cref="Event{TArg0}"/>. It should not be called by a Whiskey user.
        /// </remarks>
        [Obsolete]
        void Handle(TArg0 arg0);
    }

    /// <summary>
    /// Listener for events. Binds an <see cref="Event{TArg0}"/> to a <see cref="UnityEvent{TArg0}"/>. Automatically Enabled/Disabled depending on <see cref="GameObject"/> state.
    /// </summary>
    /// <remarks>
    /// Attach this to any <see cref="GameObject"/> in the Unity Editor and connect one <see cref="Event{TArg0}"/> to multiple Unity reactions.
    /// </remarks>
    public class Listener<TArg0> : MonoBehaviour, IListener<TArg0>
    {
        [SerializeField]
        private Event<TArg0> @event;

        /// <inheritdoc/>
        public Event<TArg0> Event { get => @event; set => @event = value; }

        [SerializeField]
        private UnityEvent<TArg0> reaction;

        /// <inheritdoc/>
        public UnityEvent<TArg0> Reaction { get => reaction; set => reaction = value; }

        /// <inheritdoc/>
        public void Handle(TArg0 arg0) => Reaction.Invoke( arg0);

        private void OnEnable() => Event.Subscribe(this);

        private void OnDisable() => Event.Unsubscribe(this);
    }

    /// <summary>
    /// Listener for events. Binds an <see cref="Event{TArg0, TArg1}"/> to a <see cref="UnityEvent{TArg0, TArg1}"/>. Automatically Enabled/Disabled depending on <see cref="GameObject"/> state.
    /// </summary>
    public interface IListener<TArg0, TArg1>
    {
        /// <summary>
        /// The bound Event
        /// </summary>
        Event<TArg0, TArg1> Event { get; set; }

        /// <summary>
        /// The bound Reaction
        /// </summary>
        UnityEvent<TArg0, TArg1> Reaction { get; set; }

        /// <summary>
        /// Do not use.
        /// </summary>
        /// <remarks>
        /// This method is used internally to Trigger reactions from an <see cref="Event{TArg0, TArg1}"/>. It should not be called by a Whiskey user.
        /// </remarks>
        [Obsolete]
        void Handle(TArg0 arg0, TArg1 arg1);
    }

    /// <summary>
    /// Listener for events. Binds an <see cref="Event{TArg0, TArg1}"/> to a <see cref="UnityEvent{TArg0, TArg1}"/>. Automatically Enabled/Disabled depending on <see cref="GameObject"/> state.
    /// </summary>
    /// <remarks>
    /// Attach this to any <see cref="GameObject"/> in the Unity Editor and connect one <see cref="Event{TArg0, TArg1}"/> to multiple Unity reactions.
    /// </remarks>
    public class Listener<TArg0, TArg1> : MonoBehaviour, IListener<TArg0, TArg1>
    {
        [SerializeField]
        private Event<TArg0, TArg1> @event;

        /// <inheritdoc/>
        public Event<TArg0, TArg1> Event { get => @event; set => @event = value; }

        [SerializeField]
        private UnityEvent<TArg0, TArg1> reaction;

        /// <inheritdoc/>
        public UnityEvent<TArg0, TArg1> Reaction { get => reaction; set => reaction = value; }

        /// <inheritdoc/>
        public void Handle(TArg0 arg0, TArg1 arg1) => Reaction.Invoke( arg0,  arg1);

        private void OnEnable() => Event.Subscribe(this);

        private void OnDisable() => Event.Unsubscribe(this);
    }

    /// <summary>
    /// Listener for events. Binds an <see cref="Event{TArg0, TArg1, TArg2}"/> to a <see cref="UnityEvent{TArg0, TArg1, TArg2}"/>. Automatically Enabled/Disabled depending on <see cref="GameObject"/> state.
    /// </summary>
    public interface IListener<TArg0, TArg1, TArg2>
    {
        /// <summary>
        /// The bound Event
        /// </summary>
        Event<TArg0, TArg1, TArg2> Event { get; set; }

        /// <summary>
        /// The bound Reaction
        /// </summary>
        UnityEvent<TArg0, TArg1, TArg2> Reaction { get; set; }

        /// <summary>
        /// Do not use.
        /// </summary>
        /// <remarks>
        /// This method is used internally to Trigger reactions from an <see cref="Event{TArg0, TArg1, TArg2}"/>. It should not be called by a Whiskey user.
        /// </remarks>
        [Obsolete]
        void Handle(TArg0 arg0, TArg1 arg1, TArg2 arg2);
    }

    /// <summary>
    /// Listener for events. Binds an <see cref="Event{TArg0, TArg1, TArg2}"/> to a <see cref="UnityEvent{TArg0, TArg1, TArg2}"/>. Automatically Enabled/Disabled depending on <see cref="GameObject"/> state.
    /// </summary>
    /// <remarks>
    /// Attach this to any <see cref="GameObject"/> in the Unity Editor and connect one <see cref="Event{TArg0, TArg1, TArg2}"/> to multiple Unity reactions.
    /// </remarks>
    public class Listener<TArg0, TArg1, TArg2> : MonoBehaviour, IListener<TArg0, TArg1, TArg2>
    {
        [SerializeField]
        private Event<TArg0, TArg1, TArg2> @event;

        /// <inheritdoc/>
        public Event<TArg0, TArg1, TArg2> Event { get => @event; set => @event = value; }

        [SerializeField]
        private UnityEvent<TArg0, TArg1, TArg2> reaction;

        /// <inheritdoc/>
        public UnityEvent<TArg0, TArg1, TArg2> Reaction { get => reaction; set => reaction = value; }

        /// <inheritdoc/>
        public void Handle(TArg0 arg0, TArg1 arg1, TArg2 arg2) => Reaction.Invoke( arg0,  arg1,  arg2);

        private void OnEnable() => Event.Subscribe(this);

        private void OnDisable() => Event.Unsubscribe(this);
    }

    /// <summary>
    /// Listener for events. Binds an <see cref="Event{TArg0, TArg1, TArg2, TArg3}"/> to a <see cref="UnityEvent{TArg0, TArg1, TArg2, TArg3}"/>. Automatically Enabled/Disabled depending on <see cref="GameObject"/> state.
    /// </summary>
    public interface IListener<TArg0, TArg1, TArg2, TArg3>
    {
        /// <summary>
        /// The bound Event
        /// </summary>
        Event<TArg0, TArg1, TArg2, TArg3> Event { get; set; }

        /// <summary>
        /// The bound Reaction
        /// </summary>
        UnityEvent<TArg0, TArg1, TArg2, TArg3> Reaction { get; set; }

        /// <summary>
        /// Do not use.
        /// </summary>
        /// <remarks>
        /// This method is used internally to Trigger reactions from an <see cref="Event{TArg0, TArg1, TArg2, TArg3}"/>. It should not be called by a Whiskey user.
        /// </remarks>
        [Obsolete]
        void Handle(TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3);
    }

    /// <summary>
    /// Listener for events. Binds an <see cref="Event{TArg0, TArg1, TArg2, TArg3}"/> to a <see cref="UnityEvent{TArg0, TArg1, TArg2, TArg3}"/>. Automatically Enabled/Disabled depending on <see cref="GameObject"/> state.
    /// </summary>
    /// <remarks>
    /// Attach this to any <see cref="GameObject"/> in the Unity Editor and connect one <see cref="Event{TArg0, TArg1, TArg2, TArg3}"/> to multiple Unity reactions.
    /// </remarks>
    public class Listener<TArg0, TArg1, TArg2, TArg3> : MonoBehaviour, IListener<TArg0, TArg1, TArg2, TArg3>
    {
        [SerializeField]
        private Event<TArg0, TArg1, TArg2, TArg3> @event;

        /// <inheritdoc/>
        public Event<TArg0, TArg1, TArg2, TArg3> Event { get => @event; set => @event = value; }

        [SerializeField]
        private UnityEvent<TArg0, TArg1, TArg2, TArg3> reaction;

        /// <inheritdoc/>
        public UnityEvent<TArg0, TArg1, TArg2, TArg3> Reaction { get => reaction; set => reaction = value; }

        /// <inheritdoc/>
        public void Handle(TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3) => Reaction.Invoke( arg0,  arg1,  arg2,  arg3);

        private void OnEnable() => Event.Subscribe(this);

        private void OnDisable() => Event.Unsubscribe(this);
    }

}

